import javax.swing.JComboBox;     
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DELL
 */
public class diagnosis extends javax.swing.JFrame {

    private Menu menuFrame;
    private Connection koneksi;

    private void initializeDatabaseConnection() {
    koneksi = Koneksi.getKoneksi();
    if (koneksi == null) {
        System.out.println("Gagal terhubung ke database.");
        JOptionPane.showMessageDialog(this, "Gagal terhubung ke database.", "Kesalahan Koneksi", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * Creates new form diagnosis
     */
    public diagnosis() {
        initComponents();
        initializeDatabaseConnection();
   
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ques6 = new javax.swing.JComboBox<>();
        ques1 = new javax.swing.JComboBox<>();
        ques5 = new javax.swing.JComboBox<>();
        ques4 = new javax.swing.JComboBox<>();
        ques3 = new javax.swing.JComboBox<>();
        ques2 = new javax.swing.JComboBox<>();
        txt_input_namapasien = new javax.swing.JTextField();
        btn_diagnosis = new javax.swing.JToggleButton();
        btn_to_menu = new javax.swing.JToggleButton();
        ques7 = new javax.swing.JComboBox<>();
        ques8 = new javax.swing.JComboBox<>();
        ques9 = new javax.swing.JComboBox<>();
        ques10 = new javax.swing.JComboBox<>();
        ques11 = new javax.swing.JComboBox<>();
        ques12 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui componen/form diagnosis (1).png"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ques6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques6ActionPerformed(evt);
            }
        });
        getContentPane().add(ques6, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 530, -1, -1));

        ques1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques1ActionPerformed(evt);
            }
        });
        getContentPane().add(ques1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 230, -1, -1));

        ques5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques5ActionPerformed(evt);
            }
        });
        getContentPane().add(ques5, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 470, -1, -1));

        ques4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques4ActionPerformed(evt);
            }
        });
        getContentPane().add(ques4, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 400, -1, -1));

        ques3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques3ActionPerformed(evt);
            }
        });
        getContentPane().add(ques3, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 340, -1, -1));

        ques2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques2ActionPerformed(evt);
            }
        });
        getContentPane().add(ques2, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 280, -1, -1));

        txt_input_namapasien.setBackground(new java.awt.Color(217, 217, 217));
        txt_input_namapasien.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_input_namapasien.setBorder(null);
        txt_input_namapasien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_input_namapasienActionPerformed(evt);
            }
        });
        getContentPane().add(txt_input_namapasien, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, 580, 30));

        btn_diagnosis.setOpaque(false);
        btn_diagnosis.setContentAreaFilled(false);
        btn_diagnosis.setBorderPainted(false);
        btn_diagnosis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_diagnosisActionPerformed(evt);
            }
        });
        getContentPane().add(btn_diagnosis, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 670, 130, 40));

        btn_to_menu.setOpaque(false);
        btn_to_menu.setContentAreaFilled(false);
        btn_to_menu.setBorderPainted(false);
        btn_to_menu.setBorder(null);
        btn_to_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_to_menuActionPerformed(evt);
            }
        });
        getContentPane().add(btn_to_menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 70, 30));

        ques7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques7ActionPerformed(evt);
            }
        });
        getContentPane().add(ques7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1460, 220, -1, -1));

        ques8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques8ActionPerformed(evt);
            }
        });
        getContentPane().add(ques8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1460, 280, -1, -1));

        ques9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques9ActionPerformed(evt);
            }
        });
        getContentPane().add(ques9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1460, 340, -1, -1));

        ques10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques10ActionPerformed(evt);
            }
        });
        getContentPane().add(ques10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1460, 390, -1, -1));

        ques11.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques11ActionPerformed(evt);
            }
        });
        getContentPane().add(ques11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1460, 450, -1, -1));

        ques12.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Pilih--", "Ya", "Tidak" }));
        ques12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ques12ActionPerformed(evt);
            }
        });
        getContentPane().add(ques12, new org.netbeans.lib.awtextra.AbsoluteConstraints(1460, 510, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui componen/form diagnosis (1).png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ques6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques6ActionPerformed

    private void ques1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques1ActionPerformed

    private void ques5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques5ActionPerformed

    private void ques4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques4ActionPerformed

    private void ques3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques3ActionPerformed

    private void ques2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques2ActionPerformed

    private void txt_input_namapasienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_input_namapasienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_input_namapasienActionPerformed

    private void btn_diagnosisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_diagnosisActionPerformed
        if (!isValidInput()) {
        JOptionPane.showMessageDialog(this, "Masukkan Nama Pasien.", "Input Invalid", JOptionPane.WARNING_MESSAGE);
        return;
    }
      try {
            // Inisialisasi koneksi database jika belum dilakukan sebelumnya
            if (koneksi == null) {
                initializeDatabaseConnection();
                if (koneksi == null) {
                    // Jika masih belum terhubung, tampilkan pesan kesalahan
                    JOptionPane.showMessageDialog(this, "Gagal terhubung ke database.", "Kesalahan Koneksi", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
          
        // Menyimpan data pasien
        
        String namaPasien = txt_input_namapasien.getText();

        // Melakukan diagnosis berdasarkan respons pengguna
        int skor = hitungSkorDiagnosis();

        // Menyimpan hasil diagnosis ke dalam database
        simpanDataDiagnosa(namaPasien, skor);

        // Menampilkan hasil atau rekomendasi
        tampilkanHasilDiagnosis(skor);

        // Mereset formulir
        resetForm();
    }   catch (IllegalArgumentException ex) {
            Logger.getLogger(diagnosis.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btn_diagnosisActionPerformed

    private void btn_to_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_to_menuActionPerformed
        Menu menuFrame = new Menu();
        
        menuFrame.setVisible(true);
        
        this.dispose();
    }//GEN-LAST:event_btn_to_menuActionPerformed

    private void ques7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques7ActionPerformed

    private void ques8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques8ActionPerformed

    private void ques9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques9ActionPerformed

    private void ques10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques10ActionPerformed

    private void ques11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques11ActionPerformed

    private void ques12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ques12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ques12ActionPerformed


    
   private void simpanDataDiagnosa(String namaPasien, int skor) {
    // Mendapatkan keterangan, saran, dan penyebab dari database
    String[] saranResult = getDiagnosisResultFromDatabase(hitungRataRataSkor(skor));
    String keterangan = saranResult[0];
    String saran = saranResult[1];
    String penyebab = getPenyebabFromDatabase(skor);

    // Query untuk menyimpan data ke tabel history
    String query = "INSERT INTO history (UserID, skor_diagnosis, Keterangan, Saran, Penyebab) VALUES (?, ?, ?, ?, ?)";
    try (PreparedStatement preparedStatement = koneksi.prepareStatement(query)) {
        preparedStatement.setString(1, namaPasien);
        preparedStatement.setInt(2, skor);
        preparedStatement.setString(3, keterangan);
        preparedStatement.setString(4, saran);
        preparedStatement.setString(5, penyebab);

        preparedStatement.executeUpdate();
        System.out.println("Data berhasil disimpan ke database.");
    } catch (SQLException e) {
        System.err.println("Gagal menyimpan data ke database.");
    }
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(diagnosis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(diagnosis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new diagnosis().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btn_diagnosis;
    private javax.swing.JToggleButton btn_to_menu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> ques1;
    private javax.swing.JComboBox<String> ques10;
    private javax.swing.JComboBox<String> ques11;
    private javax.swing.JComboBox<String> ques12;
    private javax.swing.JComboBox<String> ques2;
    private javax.swing.JComboBox<String> ques3;
    private javax.swing.JComboBox<String> ques4;
    private javax.swing.JComboBox<String> ques5;
    private javax.swing.JComboBox<String> ques6;
    private javax.swing.JComboBox<String> ques7;
    private javax.swing.JComboBox<String> ques8;
    private javax.swing.JComboBox<String> ques9;
    private javax.swing.JTextField txt_input_namapasien;
    // End of variables declaration//GEN-END:variables
   
    private int hitungSkorDiagnosis() {
    double totalSkor = 0;

    for (int i = 1; i <= JUMLAH_PERTANYAAN; i++) {
        try {
            JComboBox<String> currentQuestion = (JComboBox<String>) getClass().getDeclaredField("ques" + i).get(this);
            Object selectedItem = currentQuestion.getSelectedItem();
            System.out.println("Question " + i + ": " + selectedItem);

            // Jika jawaban "Ya", tambahkan bobot skor
            if (selectedItem != null && selectedItem.toString().equals("Ya")) {
                totalSkor += Math.round(hitungBobotSkor(i));
            }
        } catch (NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
            // Handle or log the exception appropriately.
            return 0; // or another appropriate value
        }
    }

    double rataRataSkor = totalSkor / JUMLAH_PERTANYAAN;
    System.out.println("Total Skor: " + totalSkor);
    System.out.println("Rata-rata Skor: " + rataRataSkor);
    
    return (int) Math.round(rataRataSkor);
}



private double hitungBobotSkor(int questionNumber) {
    switch (questionNumber) {
        case 1: return 0.20;
        case 2: return 0.15;
        case 3: return 0.85;
        case 4: return 0.60;
        case 5: return 0.50;
        case 6: return 0.35;
        case 7: return 0.30;
        case 8: return 0.45;
        case 9: return 0.40;
        case 10: return 0.60;
        case 11: return 0.80;
        case 12: return 0.80;
        default: return 0;
    }
}


private static final int JUMLAH_PERTANYAAN = 12;


private double hitungRataRataSkor(double totalSkor) {
    return totalSkor / JUMLAH_PERTANYAAN;
}


    private void tampilkanHasilDiagnosis(int skor) {
    String namaPasien = txt_input_namapasien.getText();
    double rataRataSkor = hitungRataRataSkor(skor);

    // Dapatkan keterangan dan saran dari tabel cf
    String[] diagnosisResult = getDiagnosisResultFromDatabase(rataRataSkor);

    String htmlMessage;
    htmlMessage = "<html>"
            + "<b>Hasil Diagnosis untuk Pasien:</b><br>"
            + "<b>Nama Pasien:</b> " + namaPasien + "<br><br>"
            + "<b>Diagnosis:</b><br>" + diagnosisResult[0] + "<br><br><b>Penyebab:</b><br>" + getPenyebabFromDatabase(skor)
            + "<br><br><b>Saran:</b><br>" + diagnosisResult[1] + "<br><br><b>rataRataSkor:</b><br>" + rataRataSkor;

    JOptionPane.showMessageDialog(this, htmlMessage, "Hasil Diagnosis", JOptionPane.INFORMATION_MESSAGE);
}
    private String[] getSaranFromDatabase(String kodeSaran) {
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;

    try {
        connection = Koneksi.getKoneksi();
        String query = "SELECT Keterangan, Saran FROM tabel_saran WHERE KodeSaran = ?";
        preparedStatement = connection.prepareStatement(query);
        preparedStatement.setString(1, kodeSaran);

        resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            String keterangan = resultSet.getString("Keterangan");
            String saran = resultSet.getString("Saran");
            return new String[]{keterangan, saran};
        } else {
            return new String[]{"Data saran tidak ditemukan.", ""};
        }
    } catch (SQLException e) {
        return new String[]{"Error dalam mengambil data dari database.", ""};
    } finally {
        try {
            if (resultSet != null) resultSet.close();
            if (preparedStatement != null) preparedStatement.close();
            if (connection != null) connection.close();
        } catch (SQLException e) {
            // Handle the exception appropriately.
        }
    }
}



    private String getPenyebabFromDatabase(int skor) {
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;

    try {
        connection = Koneksi.getKoneksi();
        String query = "SELECT Nama_Gejala FROM tabel_gejala WHERE Nilai_Bobot = ?";
        preparedStatement = connection.prepareStatement(query);
        preparedStatement.setDouble(1, skor);

        resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            return resultSet.getString("Nama_Gejala");
        } else {
            return "Data penyebab tidak ditemukan.";
        }
    } catch (SQLException e) {
        return "Error dalam mengambil data dari database.";
    } finally {
        try {
            if (resultSet != null) resultSet.close();
            if (preparedStatement != null) preparedStatement.close();
            if (connection != null) connection.close();
        } catch (SQLException e) {
            // Handle the exception appropriately.
        }
    }
}



    private void resetForm() {
    
    txt_input_namapasien.setText("");
    ques1.setSelectedIndex(0);
    ques2.setSelectedIndex(0);
    ques3.setSelectedIndex(0);
    ques4.setSelectedIndex(0);
    ques5.setSelectedIndex(0);
    ques6.setSelectedIndex(0);
    ques7.setSelectedIndex(0);
    ques8.setSelectedIndex(0);
    ques9.setSelectedIndex(0);
    ques10.setSelectedIndex(0);
    ques11.setSelectedIndex(0);
    ques12.setSelectedIndex(0);
}
    
    private boolean isValidInput() {
    return !txt_input_namapasien.getText().isEmpty();
    }


    private String[] getDiagnosisResultFromDatabase(double hitungRataRataSkor) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
